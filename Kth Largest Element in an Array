Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

Can you solve it without sorting?

 

Example 1:

Input: nums = [3,2,1,5,6,4], k = 2
Output: 5
Example 2:

Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4
 

Constraints:

1 <= k <= nums.length <= 105
-104 <= nums[i] <= 104

int findKthLargest(int* nums, int numsSize, int k){

}

#include <stdio.h>

// Function to swap two integers
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to partition the array using Lomuto partition scheme
int partition(int nums[], int low, int high) {
    int pivot = nums[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (nums[j] >= pivot) {
            i++;
            swap(&nums[i], &nums[j]);
        }
    }
    swap(&nums[i + 1], &nums[high]);
    return i + 1;
}

// Function to find the kth largest element using QuickSelect algorithm
int quickSelect(int nums[], int low, int high, int k) {
    if (low <= high) {
        int partitionIndex = partition(nums, low, high);

        // If the partition index is equal to k, we've found the kth largest element
        if (partitionIndex == k) {
            return nums[partitionIndex];
        }
        // If the partition index is greater than k, search in the left subarray
        else if (partitionIndex > k) {
            return quickSelect(nums, low, partitionIndex - 1, k);
        }
        // If the partition index is less than k, search in the right subarray
        else {
            return quickSelect(nums, partitionIndex + 1, high, k);
        }
    }
    return -1; // Return a sentinel value if something goes wrong
}

int findKthLargest(int* nums, int numsSize, int k) {
    // Call the quickSelect function to find the kth largest element
    return quickSelect(nums, 0, numsSize - 1, k - 1);
}

int main() {
    int nums1[] = {3, 2, 1, 5, 6, 4};
    int k1 = 2;
    int numsSize1 = sizeof(nums1) / sizeof(nums1[0]);
    printf("Example 1: %d\n", findKthLargest(nums1, numsSize1, k1));

    int nums2[] = {3, 2, 3, 1, 2, 4, 5, 5, 6};
    int k2 = 4;
    int numsSize2 = sizeof(nums2) / sizeof(nums2[0]);
    printf("Example 2: %d\n", findKthLargest(nums2, numsSize2, k2));

    return 0;
}
